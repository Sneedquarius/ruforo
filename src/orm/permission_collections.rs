//! SeaORM Entity. Generated by sea-orm-codegen 0.4.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "permission_collections")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub group_id: Option<i32>,
    pub user_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::permission_categories::Entity",
        from = "Column::GroupId",
        to = "super::permission_categories::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PermissionCategories,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
    #[sea_orm(has_many = "super::permission_values::Entity")]
    PermissionValues,
    #[sea_orm(has_many = "super::forum_permissions::Entity")]
    ForumPermissions,
}

impl Related<super::permission_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionCategories.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::permission_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PermissionValues.def()
    }
}

impl Related<super::forum_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ForumPermissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
