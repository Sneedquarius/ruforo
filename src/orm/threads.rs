//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "threads")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: Option<i32>,
    pub created_at: DateTime,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub subtitle: Option<String>,
    pub view_count: i32,
    pub post_count: i32,
    pub first_post_id: Option<i32>,
    pub last_post_id: Option<i32>,
    pub last_post_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::posts::Entity",
        from = "Column::FirstPostId",
        to = "super::posts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FirstPost,
    #[sea_orm(
        belongs_to = "super::posts::Entity",
        from = "Column::LastPostId",
        to = "super::posts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    LastPost,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(has_many = "super::posts::Entity")]
    Posts,
    #[sea_orm(
        belongs_to = "super::user_names::Entity",
        from = "Column::UserId",
        to = "super::user_names::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserName,
}

impl Related<super::posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Posts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::user_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserName.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
