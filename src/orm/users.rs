//! SeaORM Entity. Generated by sea-orm-codegen 0.4.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTime,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    pub password_cipher: Cipher,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "password_cipher")]
pub enum Cipher {
    #[sea_orm(string_value = "argon2id")]
    Argon2id,
    #[sea_orm(string_value = "bcrypt")]
    Bcrypt,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::threads::Entity")]
    Threads,
    #[sea_orm(has_many = "super::ugc_revisions::Entity")]
    UgcRevisions,
    #[sea_orm(has_many = "super::posts::Entity")]
    Posts,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::ugc_deletions::Entity")]
    UgcDeletions,
    #[sea_orm(has_many = "super::ugc_attachments::Entity")]
    UgcAttachments,
    #[sea_orm(
        belongs_to = "super::user_avatars::Entity",
        from = "Column::Id",
        to = "super::user_avatars::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    UserAvatar,
    #[sea_orm(
        belongs_to = "super::user_names::Entity",
        from = "Column::Id",
        to = "super::user_names::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserName,
    #[sea_orm(has_many = "super::user_2fa::Entity")]
    User2fa,
}

impl Related<super::attachments::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_avatars::Relation::Attachments.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::user_avatars::Relation::Users.def().rev())
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_groups::Relation::Groups.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::user_groups::Relation::Users.def().rev())
    }
}

impl Related<super::posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Posts.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::threads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Threads.def()
    }
}

impl Related<super::ugc_deletions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UgcDeletions.def()
    }
}

impl Related<super::user_2fa::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User2fa.def()
    }
}

impl Related<super::ugc_attachments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UgcAttachments.def()
    }
}

impl Related<super::user_avatars::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAvatar.def()
    }
}

impl Related<super::user_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserName.def()
    }
}

impl Related<super::ugc_revisions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UgcRevisions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub struct UserToAvatarAttachment;

impl Linked for UserToAvatarAttachment {
    type FromEntity = super::users::Entity;

    type ToEntity = super::attachments::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![
            super::users::Relation::UserAvatar.def(),
            super::user_avatars::Relation::Attachments.def(),
        ]
    }
}
